{"version":3,"sources":["functions/firebase.ts","components/UnstyledLink.tsx","pages/ReceiptsPage.tsx","functions/utils.ts","hooks/useLocalStorage.tsx","hooks/useAppData.tsx","components/EditableField.tsx","pages/old/ItemsTab.tsx","pages/old/PeopleTab.tsx","components/DebugView.tsx","pages/old/OldApp.tsx","pages/ReceiptItemsTab.tsx","pages/ReceiptPeopleTab.tsx","pages/ReceiptInfoPage.tsx","core/BaseRouter.tsx","core/Layout.tsx","core/App.tsx","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","receiptsRef","database","ref","child","useGetReceipt","id","useState","isLoading","setIsLoading","receipt","setReceipt","useEffect","on","snapshot","val","items","useMemo","Object","entries","map","item","subTotal","reduce","sum","currency","add","cost","value","people","person","setPersonItemQuantity","personId","itemId","a","quantity","update","Math","max","personSubTotalMap","personToItemQuantityMap","numShares","values","itemToPersonQuantityMap","total","tipCost","taxCost","getChargeForPerson","charge","divide","multiply","getTotalForPerson","updateChargeValue","receiptId","valueString","set","updateChargeValueByPct","percentString","parseFloat","updateReceiptItemValue","key","UnstyledLink","children","style","otherProps","color","textDecoration","ReceiptsPage","receipts","data","setData","newState","push","useGetReceipts","Container","maxWidth","sx","pt","display","flexDirection","gap","Typography","mb","Paper","width","List","to","Routes","receiptInfo","route","ListItem","button","flex","title","format","Date","date","NewReceiptForm","setTitle","onSubmit","event","preventDefault","getTime","Box","TextField","label","fullWidth","variant","onChange","target","Button","type","nameToInitials","name","toUpperCase","split","part","substr","join","setify","array","Set","useLocalStorage","initialValue","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","appDataDefaults","personToItemsMap","itemToPeopleMap","tip","tax","noop","AppDataContext","createContext","appData","setAppData","reset","putItem","removeItem","splitItem","putPerson","removePerson","handleSetItemPerson","itemCostMap","subTotalForPerson","taxForPerson","tipForPerson","totalForPerson","AppDataContextProvider","curr","previousValue","currentValue","length","percentForPerson","Provider","newItem","prev","index","indexOf","filter","find","splitCount","parseInt","prompt","isNaN","newItems","Array","fill","_","uuidv4","newPerson","personIds","selected","_itemId","_personId","useAppData","useContext","EditableField","formatValue","disabled","textAlign","isEditMode","setIsEditMode","textFieldRef","useRef","theme","useTheme","tempValue","setTempValue","useLayoutEffect","current","focus","containerProps","paddingTop","paddingBottom","DisplayTextField","align","Underline","marginTop","height","backgroundColor","palette","text","opacity","onBlur","onFocus","setTimeout","setSelectionRange","onKeyDown","includes","code","inputRef","inputProps","ButtonBase","onClick","itemEntryFormDefaults","undefined","StyledTable","styled","Table","whiteSpace","ItemsTab","resetAll","useForm","defaultValues","control","handleSubmit","nameFieldRef","costFieldRef","handleOnSubmit","handleOnKeyDown","confirm","Grid","container","spacing","xs","alignItems","md","render","field","rules","required","overflow","position","TableHead","TableRow","TableCell","left","zIndex","minWidth","Tooltip","Avatar","fontSize","TableBody","amber","String","IconButton","size","edge","marginRight","Checkbox","checked","taxPct","toFixed","tipPct","location","href","txn","user","amount","note","getVenmoPaymentLink","PeopleTab","personNameInput","setPersonNameInput","handleAddPerson","trim","ListItemAvatar","ListItemSecondaryAction","DebugView","showDebugView","setShowDebugView","marginBottom","Card","Collapse","in","CardContent","buttonTitle","UncontrolledCollapse","open","setOpen","App","currentTab","setCurrentTab","Tabs","indicatorColor","textColor","centered","Tab","top","warningBgColor","ReceiptItemsTab","useParams","remove","TableContainer","component","justifyContent","colSpan","isItemFull","getPersonCountForItem","personItemQuantity","getItemQuantityForPerson","my","percent","addItemFormDefaults","addItemFormValidation","yup","shape","positive","integer","AddItemForm","resolver","yupResolver","quantityFieldRef","form","handleFocus","p","sm","step","min","ReceiptPeopleTab","Divider","mt","ReceiptInfoPage","tab","history","useHistory","CircularProgress","ReceiptInfoTabs","updateReceiptValue","path","tabPath","exact","from","RECEIPTS_PATH","RECEIPT_INFO_PATH","params","generatePath","replace","BaseRouter","OldApp","Offset","mixins","toolbar","Layout","AppBar","Toolbar","flexGrow","createTheme","background","default","grey","ThemeProvider","CssBaseline","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b420e82d.chunk.js","sourcesContent":["import firebase from 'firebase';\nimport { useEffect, useMemo, useState } from 'react';\nimport currency from 'currency.js';\n\ntype ThenableReference = firebase.database.ThenableReference;\n\nconst config = {\n  apiKey: 'AIzaSyA0c1akMZuNjqCKy8XPOJMkt2gCxhbRTDo',\n  authDomain: 'rece-a5835.firebaseapp.com',\n  projectId: 'rece-a5835',\n  storageBucket: 'rece-a5835.appspot.com',\n  messagingSenderId: '952022605285',\n  appId: '1:952022605285:web:dc6c4ad42eaeb6bf1ae30c',\n  measurementId: 'G-6Z1RJYKRSE',\n};\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth;\nexport const databaseRef = firebase.database().ref();\nexport const receiptsRef = databaseRef.child('receipts');\n\nexport type ReceiptEntity = {\n  id: string;\n  title: string;\n  total: number;\n  date: number;\n  items?: Record<string, ItemEntity>;\n  people?: Record<string, PersonEntity>;\n  personToItemQuantityMap?: Record<string, Record<string, { quantity: number }>>;\n  itemToPersonQuantityMap?: Record<string, Record<string, { quantity: number }>>;\n  taxCost: number;\n  tipCost: number;\n};\n\nexport type ItemEntity = {\n  id: string;\n  name: string;\n  cost: number;\n  quantity: number;\n};\n\nexport type PersonEntity = {\n  id: string;\n  name: string;\n};\n\nexport const useGetReceipts = (): Array<ReceiptEntity> => {\n  const [data, setData] = useState<Array<ReceiptEntity>>([]);\n\n  useEffect(() => {\n    receiptsRef.on('value', (snapshot) => {\n      const items = snapshot.val();\n      const newState = [];\n      for (const item in items) {\n        newState.push({\n          id: item,\n          ...items[item],\n        });\n      }\n      setData(newState);\n    });\n  }, []);\n\n  return data;\n};\n\nexport type ChargeType = 'taxCost' | 'tipCost';\n\nexport type UseGetReceiptResponse = {\n  receipt?: ReceiptEntity;\n  items: Array<ItemEntity>;\n  people: Array<PersonEntity>;\n  isLoading: boolean;\n  subTotal: number;\n  total: number;\n  setPersonItemQuantity: (personId: string, itemId: string, quantity: number) => Promise<void>;\n  personSubTotalMap: Record<string, number>;\n  getChargeForPerson: (charge: ChargeType, personId: string) => number;\n  getTotalForPerson: (personId: string) => number;\n};\n\nexport const useGetReceipt = (id: string): UseGetReceiptResponse => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [receipt, setReceipt] = useState<ReceiptEntity>();\n\n  useEffect(() => {\n    receiptsRef.child(id).on('value', (snapshot) => {\n      const receipt = snapshot.val();\n      setReceipt({ ...receipt, id });\n      setIsLoading(false);\n    });\n  }, []);\n\n  const items = useMemo<Array<ItemEntity>>(() => {\n    if (!receipt) return [];\n    return Object.entries(receipt.items ?? {}).map(([id, item]) => ({ ...item, id }));\n  }, [receipt]);\n\n  const subTotal = useMemo(() => items.reduce((sum, item) => currency(sum).add(item.cost).value, 0), [items]);\n\n  const people = useMemo<Array<PersonEntity>>(() => {\n    if (!receipt) return [];\n    return Object.entries(receipt.people ?? {}).map(([id, person]) => ({ ...person, id }));\n  }, [receipt]);\n\n  const setPersonItemQuantity = async (personId: string, itemId: string, quantity = 1) => {\n    await receiptsRef\n      .child(id)\n      .child('personToItemQuantityMap')\n      .child(personId)\n      .child(itemId)\n      .update({ quantity: Math.max(quantity, 0) });\n    await receiptsRef\n      .child(id)\n      .child('itemToPersonQuantityMap')\n      .child(itemId)\n      .child(personId)\n      .update({ quantity: Math.max(quantity, 0) });\n  };\n\n  const personSubTotalMap = useMemo<Record<string, number>>(() => {\n    const personSubTotalMap: Record<string, number> = {};\n    if (receipt) {\n      for (const person of people) {\n        personSubTotalMap[person.id] = Object.entries(receipt.personToItemQuantityMap?.[person.id] ?? {}).reduce(\n          (sum, [itemId, { quantity }]) => {\n            const item = receipt.items?.[itemId];\n            const numShares = Object.values(receipt.itemToPersonQuantityMap?.[itemId] ?? {}).reduce(\n              (sum, { quantity }) => sum + quantity,\n              0,\n            );\n            if (!item) return sum;\n            return sum + (quantity / numShares) * item.cost;\n          },\n          0,\n        );\n      }\n    }\n    return personSubTotalMap;\n  }, [receipt]);\n\n  const total = useMemo(() => subTotal + (receipt?.tipCost ?? 0) + (receipt?.taxCost ?? 0), [subTotal, receipt]);\n\n  const getChargeForPerson = (charge: ChargeType, personId: string) =>\n    currency(personSubTotalMap[personId])\n      .divide(subTotal > 0 ? subTotal : 1)\n      .multiply(receipt?.[charge] ?? 0).value;\n\n  const getTotalForPerson = (personId: string) =>\n    currency(personSubTotalMap[personId]).add(getChargeForPerson('taxCost', personId)).add(getChargeForPerson('tipCost', personId)).value;\n\n  return {\n    isLoading,\n    receipt,\n    items,\n    subTotal,\n    total,\n    people,\n    setPersonItemQuantity,\n    personSubTotalMap,\n    getChargeForPerson,\n    getTotalForPerson,\n  };\n};\n\nexport const pushReceipt = (receipt: Partial<ReceiptEntity>): ThenableReference => {\n  if (!receipt.date) receipt.date = new Date().getTime();\n  if (!receipt.total) receipt.total = 0;\n  if (!receipt.taxCost) receipt.taxCost = 0;\n  if (!receipt.tipCost) receipt.tipCost = 0;\n  if (!receipt.items) receipt.items = {};\n  if (!receipt.people) receipt.people = {};\n  if (!receipt.personToItemQuantityMap) receipt.personToItemQuantityMap = {};\n  if (!receipt.itemToPersonQuantityMap) receipt.itemToPersonQuantityMap = {};\n\n  return receiptsRef.push(receipt);\n};\n\nexport const updateChargeValue = (receiptId: string, charge: ChargeType, valueString: string): Promise<void> =>\n  receiptsRef.child(receiptId).child(charge).set(currency(valueString).value);\n\nexport const updateChargeValueByPct = (receiptId: string, charge: ChargeType, percentString: string, subTotal: number): Promise<void> => {\n  const value = currency(subTotal).multiply(parseFloat(percentString)).divide(100.0).value;\n  return receiptsRef.child(receiptId).child(charge).set(currency(value).value);\n};\n\nexport const updateReceiptValue = (receiptId: string, key: ChargeType | 'title' | 'total', value: string | number): Promise<void> => {\n  return receiptsRef.child(receiptId).child(key).set(value);\n};\n\nexport const updateReceiptItemValue = (\n  receiptId: string,\n  itemId: string,\n  key: 'name' | 'cost' | 'quantity',\n  value: string | number,\n): Promise<void> => {\n  return receiptsRef.child(receiptId).child('items').child(itemId).child(key).set(value);\n};\n\nexport const getPersonCountForItem = (receipt: ReceiptEntity, itemId: string): number => {\n  if (!receipt || !itemId) return 0;\n  return Object.values(receipt.itemToPersonQuantityMap?.[itemId] ?? {}).reduce((sum, { quantity }) => sum + quantity, 0);\n};\n\nexport const getItemQuantityForPerson = (receipt: ReceiptEntity, personId: string, itemId: string): number => {\n  if (!receipt || !personId || !itemId) return 0;\n  return ((receipt.personToItemQuantityMap ?? {})[personId] ?? {})[itemId]?.quantity ?? 0;\n};\n","import { Link } from 'react-router-dom';\nimport { ComponentProps, FunctionComponent } from 'react';\n\nconst UnstyledLink: FunctionComponent<ComponentProps<Link>> = ({ children, style, ...otherProps }) => (\n  <Link style={{ color: 'inherit', textDecoration: 'inherit', ...style }} {...otherProps}>\n    {children}\n  </Link>\n);\n\nexport default UnstyledLink;\n","import React, { FormEvent, FunctionComponent, useState } from 'react';\nimport { Box, Button, Container, List, ListItem, Paper, TextField, Typography } from '@material-ui/core';\nimport { pushReceipt, useGetReceipts } from '../functions/firebase';\nimport currency from 'currency.js';\nimport { format } from 'date-fns';\nimport { Routes } from '../core/BaseRouter';\nimport UnstyledLink from '../components/UnstyledLink';\n\nexport const ReceiptsPage: FunctionComponent = () => {\n  const receipts = useGetReceipts();\n\n  return (\n    <Container maxWidth={'md'} sx={{ pt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>\n      <Typography sx={{ mb: 2 }}>Receipts</Typography>\n      <Paper sx={{ width: '100%' }}>\n        <List>\n          {receipts.map((receipt) => (\n            <UnstyledLink key={receipt.id} to={Routes.receiptInfo.route({ receiptId: receipt.id })}>\n              <ListItem button style={{ width: '100%' }}>\n                <div style={{ width: '100%', display: 'flex', flexDirection: 'column', gap: 10 }}>\n                  <div style={{ display: 'flex' }}>\n                    <Typography style={{ flex: 1 }}>{receipt.title}</Typography>\n                    <Typography>{currency(receipt.total).format()}</Typography>\n                  </div>\n                  <Typography>{format(new Date(receipt.date), 'Pp')}</Typography>\n                </div>\n              </ListItem>\n            </UnstyledLink>\n          ))}\n        </List>\n      </Paper>\n      <NewReceiptForm />\n    </Container>\n  );\n};\n\nconst NewReceiptForm = () => {\n  const [title, setTitle] = useState('');\n\n  const onSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (!title) return;\n\n    pushReceipt({ title });\n    setTitle('');\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <Box sx={{ display: 'flex' }}>\n        <TextField\n          label={'Receipt Name'}\n          value={title}\n          fullWidth\n          variant={'standard'}\n          onChange={(event) => setTitle(event.target.value)}\n          sx={{ flex: 1 }}\n        />\n        <Button type={'submit'}>Add</Button>\n      </Box>\n    </form>\n  );\n};\n","export const nameToInitials = (name: string): string => {\n  return name\n    .toUpperCase()\n    .split(' ')\n    .map((part) => part.substr(0, 1))\n    .join('');\n};\n\nexport const indexArray = (length: number): number[] => new Array(length).fill(0).map((_, index) => index);\n\nexport const setify = <T>(array: T[]): T[] => [...new Set(array)];\n\nexport const calcPercent = (numerator: number, denominator: number, toFixed = 2): string => {\n  if (isNaN(numerator) || isNaN(denominator) || denominator === 0) return (0).toFixed(2);\n  return ((numerator / denominator) * 100.0).toFixed(toFixed);\n};\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\nexport type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n","import { Dispatch, SetStateAction, useState } from 'react';\n\nfunction useLocalStorage<T>(key: string, initialValue: T): [T, Dispatch<SetStateAction<T>>] {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      // eslint-disable-next-line no-console\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n","import useLocalStorage from './useLocalStorage';\nimport ReceiptItem from '../types/ReceiptItem';\nimport Person from '../types/Person';\nimport { indexArray, setify } from '../functions/utils';\nimport React, { createContext, Dispatch, FunctionComponent, SetStateAction, useContext, useMemo } from 'react';\nimport currency from 'currency.js';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface AppDataEntity {\n  items: ReceiptItem[];\n  people: Person[];\n  personToItemsMap: Record<string, string[]>;\n  itemToPeopleMap: Record<string, string[]>;\n  tip: number;\n  tax: number;\n}\n\nconst appDataDefaults = {\n  items: [],\n  people: [],\n  personToItemsMap: {},\n  itemToPeopleMap: {},\n  tip: 0,\n  tax: 0,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop = () => {};\n\ninterface AppDataContextProps {\n  appData: AppDataEntity;\n  setAppData: Dispatch<SetStateAction<AppDataEntity>>;\n  reset: () => void;\n  putItem: (newItem: ReceiptItem) => void;\n  removeItem: (itemId: string) => void;\n  splitItem: (itemId: string) => void;\n  putPerson: (newPerson: Person) => void;\n  removePerson: (personId: string) => void;\n  handleSetItemPerson: (itemId: string, personIds: string[], selected: boolean) => void;\n  itemCostMap: Record<string, number>;\n  subTotal: number;\n  total: number;\n  subTotalForPerson: (personId: string) => number;\n  taxForPerson: (personId: string) => number;\n  tipForPerson: (personId: string) => number;\n  totalForPerson: (personId: string) => number;\n}\n\nconst AppDataContext = createContext<AppDataContextProps>({\n  appData: appDataDefaults,\n  setAppData: noop,\n  reset: noop,\n  putItem: noop,\n  removeItem: noop,\n  splitItem: noop,\n  putPerson: noop,\n  removePerson: noop,\n  handleSetItemPerson: noop,\n  itemCostMap: {},\n  subTotal: 0,\n  total: 0,\n  subTotalForPerson: () => 0,\n  taxForPerson: () => 0,\n  tipForPerson: () => 0,\n  totalForPerson: () => 0,\n});\n\nexport const AppDataContextProvider: FunctionComponent = ({ children }) => {\n  const [appData, setAppData] = useLocalStorage<AppDataEntity>('appData', appDataDefaults);\n\n  const reset = () => {\n    setAppData(appDataDefaults);\n  };\n\n  const putItem = (newItem: ReceiptItem) => {\n    setAppData((prev) => {\n      const index = prev.items.map((item) => item.id).indexOf(newItem.id);\n      if (index > -1) {\n        prev.items[index] = newItem;\n        return { ...prev, items: [...prev.items] };\n      } else {\n        return { ...prev, items: [...prev.items, newItem] };\n      }\n    });\n  };\n\n  const removeItem = (itemId: string) => {\n    setAppData((prev) => ({ ...prev, items: prev.items.filter((item) => item.id !== itemId) }));\n  };\n\n  const splitItem = (itemId: string) => {\n    const item = appData.items.find((item) => item.id === itemId);\n    if (!item) return;\n    const splitCount = parseInt(prompt(`How many items should (${item.name} - ${currency(item.cost).format()}) be split into?`) || '');\n    if (!splitCount || isNaN(splitCount)) return;\n    const newItems: ReceiptItem[] = indexArray(splitCount).map(() => ({\n      id: uuidv4(),\n      name: item.name,\n      cost: item.cost / splitCount,\n    }));\n    setAppData((prev) => ({ ...prev, items: [...prev.items.filter((item) => item.id !== itemId), ...newItems] }));\n  };\n\n  const putPerson = (newPerson: Person) => {\n    setAppData((prev) => {\n      const index = prev.people.map((item) => item.id).indexOf(newPerson.id);\n      if (index > -1) {\n        prev.people[index] = newPerson;\n        return { ...prev, people: [...prev.people] };\n      } else {\n        return { ...prev, people: [...prev.people, newPerson] };\n      }\n    });\n  };\n\n  const removePerson = (personId: string) => {\n    setAppData((prev) => ({ ...prev, people: prev.people.filter((person) => person.id !== personId) }));\n  };\n\n  const handleSetItemPerson = (itemId: string, personIds: string[], selected: boolean) => {\n    setAppData((prev) => {\n      const { personToItemsMap, itemToPeopleMap } = prev;\n      for (const personId of personIds) {\n        if (!personToItemsMap[personId]) personToItemsMap[personId] = [];\n        if (selected) {\n          personToItemsMap[personId] = setify([...personToItemsMap[personId], itemId]);\n        } else {\n          personToItemsMap[personId] = personToItemsMap[personId].filter((_itemId) => _itemId !== itemId);\n        }\n        if (!itemToPeopleMap[itemId]) itemToPeopleMap[itemId] = [];\n        if (selected) {\n          itemToPeopleMap[itemId] = setify([...itemToPeopleMap[itemId], personId]);\n        } else {\n          itemToPeopleMap[itemId] = itemToPeopleMap[itemId].filter((_personId) => _personId !== personId);\n        }\n      }\n      return { ...prev, personToItemsMap, itemToPeopleMap };\n    });\n  };\n\n  const itemCostMap = useMemo<Record<string, number>>(() => {\n    return appData.items.reduce((map, curr) => ({ ...map, [curr.id]: curr.cost }), {});\n  }, [appData.items]);\n\n  const subTotal = useMemo(\n    () =>\n      appData.items.reduce((previousValue, currentValue) => {\n        return currency(previousValue).add(currentValue.cost).value;\n      }, 0.0),\n    [appData.items],\n  );\n\n  const total = currency(subTotal).add(appData.tax).add(appData.tip).value;\n\n  const subTotalForPerson = (personId: string) =>\n    appData.personToItemsMap[personId]?.reduce(\n      (sum, itemId) => currency(sum).add(currency(itemCostMap[itemId]).divide(appData.itemToPeopleMap[itemId].length)).value,\n      0.0,\n    ) || 0;\n\n  const percentForPerson = (personId: string) => subTotalForPerson(personId) / subTotal;\n\n  const taxForPerson = (personId: string) => currency(appData.tax).multiply(percentForPerson(personId)).value;\n  const tipForPerson = (personId: string) => currency(appData.tip).multiply(percentForPerson(personId)).value;\n\n  const totalForPerson = (personId: string) =>\n    currency(subTotalForPerson(personId)).add(taxForPerson(personId)).add(tipForPerson(personId)).value;\n\n  return (\n    <AppDataContext.Provider\n      value={{\n        appData,\n        setAppData,\n        reset,\n        putItem,\n        removeItem,\n        splitItem,\n        putPerson,\n        removePerson,\n        handleSetItemPerson,\n        itemCostMap,\n        subTotal,\n        total,\n        subTotalForPerson,\n        taxForPerson,\n        tipForPerson,\n        totalForPerson,\n      }}\n    >\n      {children}\n    </AppDataContext.Provider>\n  );\n};\n\nconst useAppData = (): AppDataContextProps => useContext(AppDataContext);\nexport default useAppData;\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport React, { ReactElement, useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { Box, ButtonBase, TextField, Typography, useTheme } from '@material-ui/core';\n\nconst EditableField = ({\n  value,\n  onChange = () => {},\n  formatValue = (value) => `${value}`,\n  type,\n  disabled = false,\n  width = 80,\n  textAlign = 'right',\n}: {\n  value: string;\n  onChange?: (value: string) => void;\n  formatValue?: (value: string) => string;\n  type?: React.InputHTMLAttributes<unknown>['type'];\n  disabled?: boolean;\n  width?: number | string;\n  textAlign?: 'left' | 'center' | 'right';\n}): ReactElement => {\n  const [isEditMode, setIsEditMode] = useState(false);\n  const textFieldRef = useRef<HTMLInputElement>();\n  const theme = useTheme();\n\n  const [tempValue, setTempValue] = useState(value);\n\n  useEffect(() => {\n    setTempValue(value);\n  }, [value]);\n\n  useLayoutEffect(() => {\n    if (isEditMode) textFieldRef.current?.focus();\n  }, [isEditMode]);\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n    setTempValue(value);\n    setTimeout(() => {\n      event.target.setSelectionRange(0, event.target.value.length);\n    }, 100);\n  };\n\n  const handleOnBlur = () => {\n    onChange(tempValue);\n    setIsEditMode(false);\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const containerProps: any = {\n    paddingTop: '4px',\n    paddingBottom: '1px',\n    display: 'inline-flex',\n    flexDirection: 'column',\n    width,\n  };\n\n  const DisplayTextField = (\n    <Typography align={textAlign} sx={{ width: '100%' }}>\n      {formatValue(value)}\n    </Typography>\n  );\n\n  const Underline = (\n    <Box\n      sx={{\n        marginTop: '2px',\n        height: '1px',\n        width: '100%',\n        backgroundColor: theme.palette.text.disabled,\n        opacity: disabled ? 0 : 1,\n      }}\n    />\n  );\n\n  return isEditMode ? (\n    <TextField\n      value={tempValue}\n      onChange={(event) => setTempValue(event.target.value)}\n      type={type}\n      onBlur={handleOnBlur}\n      onFocus={handleFocus}\n      onKeyDown={(event) => {\n        if (['Enter'].includes(event.code)) {\n          setIsEditMode(false);\n          onChange(tempValue);\n        }\n        if (['Escape'].includes(event.code)) {\n          setIsEditMode(false);\n        }\n      }}\n      inputRef={textFieldRef}\n      sx={{ width }}\n      variant={'standard'}\n      inputProps={{ style: { textAlign } }}\n    />\n  ) : disabled ? (\n    <Box sx={containerProps}>\n      {DisplayTextField}\n      {Underline}\n    </Box>\n  ) : (\n    <ButtonBase onClick={() => setIsEditMode(true)} sx={containerProps}>\n      {DisplayTextField}\n      {Underline}\n    </ButtonBase>\n  );\n};\n\nexport default EditableField;\n","import React, { FunctionComponent, KeyboardEvent, useRef } from 'react';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Checkbox,\n  Grid,\n  IconButton,\n  styled,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TextField,\n  Tooltip,\n  Typography,\n  useTheme,\n} from '@material-ui/core';\nimport { Controller, FieldPath, useForm } from 'react-hook-form';\nimport { v4 as uuidv4 } from 'uuid';\nimport currency from 'currency.js';\nimport { nameToInitials } from '../../functions/utils';\nimport useAppData from '../../hooks/useAppData';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CallSplitIcon from '@material-ui/icons/CallSplit';\nimport EditableField from '../../components/EditableField';\nimport { amber } from '@material-ui/core/colors';\n\ninterface ItemEntryForm {\n  name: string;\n  cost: number;\n}\n\nconst itemEntryFormDefaults: Partial<ItemEntryForm> = {\n  name: '',\n  cost: undefined,\n};\n\nconst getVenmoPaymentLink = ({\n  txn = 'charge',\n  user = '',\n  amount,\n  note = 'Split by Rece',\n}: {\n  txn?: 'pay' | 'charge';\n  user?: string;\n  amount: number;\n  note?: string;\n}) => `venmo://paycharge?txn=${txn}&recipients=${user}&amount=${amount}&note=${note}`;\n\nconst StyledTable = styled(Table)(() => ({\n  backgroundColor: 'white',\n  '& td': {\n    whiteSpace: 'nowrap',\n  },\n}));\n\nconst ItemsTab: FunctionComponent = () => {\n  const {\n    setAppData,\n    appData: { items, people, personToItemsMap, itemToPeopleMap, tax, tip },\n    putItem,\n    removeItem,\n    splitItem,\n    handleSetItemPerson,\n    subTotal,\n    subTotalForPerson,\n    total,\n    taxForPerson,\n    tipForPerson,\n    totalForPerson,\n  } = useAppData();\n\n  const { reset: resetAll } = useAppData();\n\n  const handleReset = () => {\n    if (confirm(\"Are you sure you'd like to reset?\")) resetAll();\n  };\n\n  const { control, handleSubmit, reset } = useForm<ItemEntryForm>({ defaultValues: itemEntryFormDefaults });\n\n  const nameFieldRef = useRef<HTMLInputElement | null>(null);\n  const costFieldRef = useRef<HTMLInputElement | null>(null);\n\n  const handleOnSubmit = ({ name, cost }: ItemEntryForm) => {\n    const newItem = {\n      id: uuidv4(),\n      name,\n      cost,\n    };\n    putItem(newItem);\n    reset(itemEntryFormDefaults);\n    nameFieldRef.current?.focus();\n  };\n\n  const handleOnKeyDown = (name: FieldPath<ItemEntryForm>) => (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.code === 'Enter') {\n      if (name === 'name') {\n        costFieldRef.current?.focus();\n      } else if (name === 'cost') {\n        handleSubmit(handleOnSubmit)(event);\n      }\n    }\n  };\n\n  const theme = useTheme();\n\n  return (\n    <>\n      <Button onClick={handleReset} style={{ color: 'inherit' }}>\n        Reset\n      </Button>\n      <Typography>Enter Receipt Items</Typography>\n      <Grid container spacing={4}>\n        <Grid item xs={12}>\n          <form onSubmit={handleSubmit(handleOnSubmit)}>\n            <Grid container spacing={2} alignItems={'flex-end'}>\n              <Grid item xs={12} md={6}>\n                <Controller\n                  control={control}\n                  name={'name'}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      inputRef={(ref) => {\n                        nameFieldRef.current = ref;\n                        field.ref(ref);\n                      }}\n                      label=\"Item Name\"\n                      fullWidth\n                      onKeyDown={handleOnKeyDown('name')}\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={12} md={5}>\n                <Controller\n                  control={control}\n                  name={'cost'}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      inputRef={(ref) => {\n                        costFieldRef.current = ref;\n                        field.ref(ref);\n                      }}\n                      label=\"Cost\"\n                      fullWidth\n                      onKeyDown={handleOnKeyDown('cost')}\n                      type={'number'}\n                    />\n                  )}\n                  rules={{ required: true }}\n                />\n              </Grid>\n              <Grid item xs={12} md={1}>\n                <Button variant={'contained'} color={'primary'} fullWidth type={'submit'}>\n                  Add\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n        </Grid>\n        <Grid item xs={12}>\n          <Box style={{ overflow: 'auto', position: 'relative' }}>\n            <StyledTable>\n              <TableHead>\n                <TableRow>\n                  <TableCell style={{ position: 'sticky', left: 0, backgroundColor: 'white', zIndex: 100, minWidth: 100 }}>Name</TableCell>\n                  <TableCell style={{ minWidth: 200 }}>Cost</TableCell>\n                  <TableCell style={{ width: 1 }} />\n                  {people.map((person) => (\n                    <TableCell key={person.id} style={{ width: 1 }}>\n                      <Tooltip title={person.name}>\n                        <Avatar style={{ height: 24, width: 24, fontSize: 12 }}>{nameToInitials(person.name)}</Avatar>\n                      </Tooltip>\n                    </TableCell>\n                  ))}\n                  <TableCell />\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {items.map((item) => (\n                  <TableRow\n                    key={item.id}\n                    style={{\n                      backgroundColor: (itemToPeopleMap[item.id]?.length || 0) === 0 ? amber[100] : 'white',\n                    }}\n                  >\n                    <TableCell\n                      style={{\n                        position: 'sticky',\n                        left: 0,\n                        zIndex: 100,\n                        backgroundColor: (itemToPeopleMap[item.id]?.length || 0) === 0 ? amber[100] : 'white',\n                      }}\n                    >\n                      <EditableField value={item.name} onChange={(name) => putItem({ ...item, name })} />\n                    </TableCell>\n                    <TableCell>\n                      <EditableField\n                        type={'number'}\n                        value={String(item.cost)}\n                        onChange={(value) => putItem({ ...item, cost: parseFloat(value) })}\n                        formatValue={(value) => currency(value).format()}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Box style={{ display: 'flex' }}>\n                        <IconButton size={'small'} edge=\"end\" onClick={() => splitItem(item.id)} style={{ marginRight: theme.spacing(1) }}>\n                          <CallSplitIcon color={'primary'} />\n                        </IconButton>\n                        <IconButton\n                          size={'small'}\n                          edge=\"end\"\n                          onClick={() => {\n                            if (confirm(\"Are you sure you'd like to remove this item?\")) removeItem(item.id);\n                          }}\n                        >\n                          <DeleteIcon color={'error'} />\n                        </IconButton>\n                      </Box>\n                    </TableCell>\n                    {people.map((person) => (\n                      <TableCell key={person.id}>\n                        <Checkbox\n                          checked={personToItemsMap[person.id]?.includes(item.id) || false}\n                          onChange={(event) => handleSetItemPerson(item.id, [person.id], event.target.checked)}\n                        />\n                      </TableCell>\n                    ))}\n                    <TableCell style={{ width: 1 }}>\n                      <Button\n                        onClick={() =>\n                          handleSetItemPerson(\n                            item.id,\n                            people.map((person) => person.id),\n                            !personToItemsMap[people[0].id]?.includes(item.id),\n                          )\n                        }\n                      >\n                        All\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {/* SubTotal Row */}\n                <TableRow>\n                  <TableCell\n                    style={{\n                      position: 'sticky',\n                      left: 0,\n                      backgroundColor: 'white',\n                      zIndex: 100,\n                      whiteSpace: 'nowrap',\n                    }}\n                  >\n                    <Typography>Subtotal</Typography>\n                  </TableCell>\n                  <TableCell>\n                    <Typography>{currency(subTotal).format()}</Typography>\n                  </TableCell>\n                  <TableCell />\n                  {people.map((person) => (\n                    <TableCell key={person.id}>\n                      <Typography>{currency(subTotalForPerson(person.id)).format()}</Typography>\n                    </TableCell>\n                  ))}\n                  <TableCell />\n                </TableRow>\n                {/* Tax Row */}\n                <TableRow\n                  style={{\n                    backgroundColor: tax === 0 ? amber[100] : undefined,\n                  }}\n                >\n                  <TableCell\n                    style={{\n                      position: 'sticky',\n                      left: 0,\n                      zIndex: 100,\n                      whiteSpace: 'nowrap',\n                      backgroundColor: tax === 0 ? amber[100] : 'white',\n                    }}\n                  >\n                    <Box\n                      style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                      }}\n                    >\n                      <Typography style={{ marginRight: 10 }}>Tax</Typography>\n                      <EditableField\n                        type={'number'}\n                        value={String(subTotal > 0 ? tax / subTotal : 0)}\n                        onChange={(taxPct) => setAppData((prev) => ({ ...prev, tax: subTotal * (parseFloat(taxPct) / 100.0) }))}\n                        formatValue={(value) => `${(parseFloat(value) * 100).toFixed(2)}%`}\n                      />\n                    </Box>\n                  </TableCell>\n                  <TableCell>\n                    <EditableField\n                      type={'number'}\n                      value={String(tax)}\n                      onChange={(tax) => setAppData((prev) => ({ ...prev, tax: parseFloat(tax) }))}\n                      formatValue={(value) => currency(value).format()}\n                    />\n                  </TableCell>\n                  <TableCell />\n                  {people.map((person) => (\n                    <TableCell key={person.id}>\n                      <Typography>{currency(taxForPerson(person.id)).format()}</Typography>\n                    </TableCell>\n                  ))}\n                  <TableCell />\n                </TableRow>\n                {/* Tip Row */}\n                <TableRow\n                  style={{\n                    backgroundColor: tip === 0 ? amber[100] : undefined,\n                  }}\n                >\n                  <TableCell\n                    style={{\n                      position: 'sticky',\n                      left: 0,\n                      backgroundColor: tip === 0 ? amber[100] : 'white',\n                      zIndex: 100,\n                      whiteSpace: 'nowrap',\n                    }}\n                  >\n                    <Box\n                      style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                      }}\n                    >\n                      <Typography style={{ marginRight: 10 }}>Tip</Typography>\n                      <EditableField\n                        type={'number'}\n                        value={String(subTotal > 0 ? tip / subTotal : 0)}\n                        onChange={(tipPct) => setAppData((prev) => ({ ...prev, tip: subTotal * (parseFloat(tipPct) / 100.0) }))}\n                        formatValue={(value) => `${(parseFloat(value) * 100).toFixed(2)}%`}\n                      />\n                    </Box>\n                  </TableCell>\n                  <TableCell>\n                    <EditableField\n                      type={'number'}\n                      value={String(tip)}\n                      onChange={(tip) => setAppData((prev) => ({ ...prev, tip: parseFloat(tip) }))}\n                      formatValue={(value) => currency(value).format()}\n                    />\n                  </TableCell>\n                  <TableCell />\n                  {people.map((person) => (\n                    <TableCell key={person.id}>\n                      <Typography>{currency(tipForPerson(person.id)).format()}</Typography>\n                    </TableCell>\n                  ))}\n                  <TableCell />\n                </TableRow>\n                {/* Total Row */}\n                <TableRow>\n                  <TableCell\n                    style={{\n                      position: 'sticky',\n                      left: 0,\n                      backgroundColor: 'white',\n                      zIndex: 100,\n                      whiteSpace: 'nowrap',\n                    }}\n                  >\n                    <Typography>Total</Typography>\n                  </TableCell>\n                  <TableCell style={{ paddingTop: 0, paddingBottom: 0 }}>\n                    <Typography>{currency(total).format()}</Typography>\n                  </TableCell>\n                  <TableCell />\n                  {people.map((person) => (\n                    <TableCell key={person.id} style={{ paddingTop: 0, paddingBottom: 0 }}>\n                      <Typography\n                        onClick={() => {\n                          window.location.href = getVenmoPaymentLink({ amount: totalForPerson(person.id) });\n                        }}\n                      >\n                        {currency(totalForPerson(person.id)).format()}\n                      </Typography>\n                    </TableCell>\n                  ))}\n                  <TableCell />\n                </TableRow>\n              </TableBody>\n            </StyledTable>\n          </Box>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default ItemsTab;\n","import React, { FunctionComponent, KeyboardEvent, useState } from 'react';\nimport {\n  Avatar,\n  Button,\n  Grid,\n  IconButton,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemSecondaryAction,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { nameToInitials } from '../../functions/utils';\nimport useAppData from '../../hooks/useAppData';\nimport EditableField from '../../components/EditableField';\n\nconst PeopleTab: FunctionComponent = () => {\n  const {\n    appData: { people },\n    putPerson,\n    removePerson,\n  } = useAppData();\n\n  const [personNameInput, setPersonNameInput] = useState('');\n\n  const handleAddPerson = (name: string) => {\n    if (!name) return;\n    putPerson({ id: uuidv4(), name: name.trim() });\n    setPersonNameInput('');\n  };\n\n  const handleOnKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.code === 'Enter') {\n      handleAddPerson(personNameInput);\n    }\n  };\n\n  return (\n    <>\n      <Typography>Enter People</Typography>\n      <Grid container spacing={4}>\n        <Grid item xs={12}>\n          <Grid container spacing={2} alignItems={'flex-end'}>\n            <Grid item xs={12} md={11}>\n              <TextField\n                value={personNameInput}\n                onChange={(event) => setPersonNameInput(event.target.value)}\n                label=\"Person Name\"\n                fullWidth\n                onKeyDown={handleOnKeyDown}\n              />\n            </Grid>\n            <Grid item xs={12} md={1}>\n              <Button variant={'contained'} color={'primary'} onClick={() => handleAddPerson(personNameInput)} fullWidth>\n                Add\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <List>\n            {people.map((person) => (\n              <ListItem key={person.id}>\n                <ListItemAvatar>\n                  <Avatar>{nameToInitials(person.name)}</Avatar>\n                </ListItemAvatar>\n                <EditableField value={person.name} onChange={(name) => putPerson({ ...person, name })} />\n                <ListItemSecondaryAction>\n                  <IconButton edge=\"end\" onClick={() => removePerson(person.id)}>\n                    <DeleteIcon />\n                  </IconButton>\n                </ListItemSecondaryAction>\n              </ListItem>\n            ))}\n          </List>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default PeopleTab;\n","import React, { FunctionComponent, useState } from 'react';\nimport useAppData from '../hooks/useAppData';\nimport { Box, Button, Card, CardContent, Collapse, Container, Typography } from '@material-ui/core';\nimport currency from 'currency.js';\n\nexport const DebugView: FunctionComponent = () => {\n  const [showDebugView, setShowDebugView] = useState(false);\n\n  const { appData, subTotalForPerson, taxForPerson, tipForPerson, totalForPerson, subTotal, total } = useAppData();\n\n  return (\n    <Box style={{ marginBottom: 50 }}>\n      <Container>\n        <Card>\n          <Button onClick={() => setShowDebugView((prev) => !prev)}>Debug</Button>\n          <Collapse in={showDebugView}>\n            <CardContent>\n              <UncontrolledCollapse buttonTitle={'appData'}>\n                <pre>{JSON.stringify(appData, null, 2)}</pre>\n              </UncontrolledCollapse>\n              <UncontrolledCollapse buttonTitle={'Real Sums'}>\n                <div>\n                  <Typography>Sub Total ({currency(subTotal).format()})</Typography>\n                  {appData.people.map((person) => (\n                    <div key={person.id}>\n                      {person.name} - {currency(subTotalForPerson(person.id)).format()}\n                    </div>\n                  ))}\n                  <div>Sum - {appData.people.reduce((sum, person) => sum.add(subTotalForPerson(person.id)), currency(0)).format()}</div>\n                </div>\n                <div>\n                  <Typography>Tax ({currency(appData.tax).format()})</Typography>\n                  {appData.people.map((person) => (\n                    <div key={person.id}>\n                      {person.name} - {currency(taxForPerson(person.id)).format()}\n                    </div>\n                  ))}\n                  <div>Sum - {appData.people.reduce((sum, person) => sum.add(taxForPerson(person.id)), currency(0)).format()}</div>\n                </div>\n                <div>\n                  <Typography>Tip ({currency(appData.tip).format()})</Typography>\n                  {appData.people.map((person) => (\n                    <div key={person.id}>\n                      {person.name} - {currency(tipForPerson(person.id)).format()}\n                    </div>\n                  ))}\n                  <div>Sum - {appData.people.reduce((sum, person) => sum.add(tipForPerson(person.id)), currency(0)).format()}</div>\n                </div>\n                <div>\n                  <Typography>Total ({currency(total).format()})</Typography>\n                  {appData.people.map((person) => (\n                    <div key={person.id}>\n                      {person.name} - {currency(totalForPerson(person.id)).format()}\n                    </div>\n                  ))}\n                  <div>Sum - {appData.people.reduce((sum, person) => sum.add(totalForPerson(person.id)), currency(0)).format()}</div>\n                </div>\n              </UncontrolledCollapse>\n            </CardContent>\n          </Collapse>\n        </Card>\n      </Container>\n    </Box>\n  );\n};\n\nconst UncontrolledCollapse: FunctionComponent<{ buttonTitle: string }> = ({ children, buttonTitle }) => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <Button onClick={() => setOpen((prev) => !prev)}>{buttonTitle}</Button>\n      <Collapse in={open}>{children}</Collapse>\n    </>\n  );\n};\n","import React, { FunctionComponent, useState } from 'react';\nimport { Container, Tab, Tabs } from '@material-ui/core';\nimport ItemsTab from './ItemsTab';\nimport PeopleTab from './PeopleTab';\nimport { AppDataContextProvider } from '../../hooks/useAppData';\nimport { DebugView } from '../../components/DebugView';\n\nconst App: FunctionComponent = () => {\n  const [currentTab, setCurrentTab] = useState(0);\n\n  return (\n    <div>\n      <AppDataContextProvider>\n        <Container>\n          <Tabs\n            value={currentTab}\n            onChange={(event, value) => setCurrentTab(value)}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            centered\n            style={{ marginBottom: 20 }}\n          >\n            <Tab label=\"Items\" />\n            <Tab label=\"People\" />\n          </Tabs>\n          {currentTab === 0 && <ItemsTab />}\n          {currentTab === 1 && <PeopleTab />}\n        </Container>\n        <DebugView />\n      </AppDataContextProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import React, { FunctionComponent, useRef } from 'react';\nimport { useParams } from 'react-router';\nimport { ReceiptInfoPathProps } from '../core/BaseRouter';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Checkbox,\n  Grid,\n  IconButton,\n  Paper,\n  styled,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Tooltip,\n  Typography,\n} from '@material-ui/core';\nimport {\n  getItemQuantityForPerson,\n  getPersonCountForItem,\n  ReceiptEntity,\n  receiptsRef,\n  updateChargeValue,\n  updateChargeValueByPct,\n  updateReceiptItemValue,\n  useGetReceipt,\n} from '../functions/firebase';\nimport { Controller, FieldPath, useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport currency from 'currency.js';\nimport * as yup from 'yup';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { nameToInitials } from '../functions/utils';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport EditableField from '../components/EditableField';\nimport { amber } from '@material-ui/core/colors';\n\nconst StyledTable = styled(Table)(() => ({\n  backgroundColor: 'white',\n  position: 'relative',\n  '& th': {\n    position: 'sticky',\n    top: 0,\n  },\n  '& tr>th:first-child, tr>td:first-child': {\n    position: 'sticky',\n    backgroundColor: 'white',\n    zIndex: 1,\n    left: 0,\n  },\n  '& td': {\n    whiteSpace: 'nowrap',\n    paddingTop: '8px',\n    paddingBottom: '8px',\n  },\n}));\n\nconst getVenmoPaymentLink = ({\n  txn = 'charge',\n  user = '',\n  amount,\n  note = 'Split by Rece',\n}: {\n  txn?: 'pay' | 'charge';\n  user?: string;\n  amount: number;\n  note?: string;\n}) => `venmo://paycharge?txn=${txn}&recipients=${user}&amount=${amount}&note=${note}`;\n\nconst warningBgColor = amber[100];\n\nconst ReceiptItemsTab: FunctionComponent = () => {\n  const { receiptId } = useParams<ReceiptInfoPathProps>();\n\n  const { receipt, items, subTotal, total, people, setPersonItemQuantity, personSubTotalMap, getChargeForPerson, getTotalForPerson } =\n    useGetReceipt(receiptId);\n\n  const removeItem = async (itemId: string) => {\n    if (!confirm(\"Are you sure you'd like to remove this item?\")) return;\n    if (!receipt || !itemId) return;\n    await receiptsRef.child(receipt.id).child('items').child(itemId).remove();\n  };\n\n  return (\n    <>\n      {receipt && (\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <AddItemForm receipt={receipt} />\n          </Grid>\n          <Grid item xs={12}>\n            {items && (\n              <TableContainer component={Paper}>\n                <StyledTable>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell />\n                      <TableCell sx={{ width: '1%' }} align=\"right\">\n                        Quantity\n                      </TableCell>\n                      <TableCell align=\"right\" sx={{ width: '1%' }}>\n                        Cost\n                      </TableCell>\n                      {people.map((person) => (\n                        <TableCell key={person.id} sx={{ width: '1%' }}>\n                          <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n                            <Tooltip title={person.name}>\n                              <Avatar style={{ height: 24, width: 24, fontSize: 12 }}>{nameToInitials(person.name)}</Avatar>\n                            </Tooltip>\n                          </Box>\n                        </TableCell>\n                      ))}\n                      <TableCell sx={{ width: '1%' }} />\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {items.length === 0 ? (\n                      <TableRow>\n                        <TableCell align={'center'} colSpan={4 + people.length}>\n                          There are no items yet.\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      items.map((item) => {\n                        const isItemFull = getPersonCountForItem(receipt, item.id) >= item.quantity;\n\n                        return (\n                          <TableRow key={item.id}>\n                            <TableCell>\n                              <EditableField\n                                value={item.name}\n                                onChange={(value) => updateReceiptItemValue(receiptId, item.id, 'name', value)}\n                                textAlign={'left'}\n                              />\n                            </TableCell>\n                            <TableCell align={'right'}>\n                              <EditableField\n                                value={String(item.quantity)}\n                                onChange={(value) => updateReceiptItemValue(receiptId, item.id, 'quantity', Math.max(1, parseInt(value)))}\n                              />\n                            </TableCell>\n                            <TableCell align={'right'}>\n                              <EditableField\n                                value={currency(item.cost).format()}\n                                onChange={(value) => updateReceiptItemValue(receiptId, item.id, 'cost', currency(value).value)}\n                              />\n                            </TableCell>\n                            {people.map((person) => {\n                              const personItemQuantity = getItemQuantityForPerson(receipt, person.id, item.id);\n\n                              return (\n                                <TableCell\n                                  key={person.id}\n                                  sx={{\n                                    width: '1%',\n                                    backgroundColor: !isItemFull ? warningBgColor : undefined,\n                                  }}\n                                  align={'center'}\n                                >\n                                  {item.quantity > 1 ? (\n                                    <Box sx={{ display: 'inline-flex', justifyContent: 'center', alignItems: 'center' }}>\n                                      <IconButton\n                                        size={'small'}\n                                        onClick={() => setPersonItemQuantity(person.id, item.id, personItemQuantity - 1)}\n                                        disabled={personItemQuantity <= 0}\n                                        style={{\n                                          opacity: personItemQuantity <= 0 ? 0.5 : undefined,\n                                        }}\n                                      >\n                                        <RemoveIcon />\n                                      </IconButton>\n                                      <Typography>{JSON.stringify(personItemQuantity)}</Typography>\n                                      <IconButton\n                                        size={'small'}\n                                        onClick={() => setPersonItemQuantity(person.id, item.id, personItemQuantity + 1)}\n                                        disabled={isItemFull}\n                                        style={{\n                                          opacity: isItemFull ? 0.5 : undefined,\n                                        }}\n                                      >\n                                        <AddIcon />\n                                      </IconButton>\n                                    </Box>\n                                  ) : (\n                                    <Box>\n                                      <Checkbox\n                                        checked={personItemQuantity > 0}\n                                        onChange={(event) => setPersonItemQuantity(person.id, item.id, event.target.checked ? 1 : 0)}\n                                        sx={{ my: '-8px' }}\n                                      />\n                                    </Box>\n                                  )}\n                                </TableCell>\n                              );\n                            })}\n                            <TableCell align=\"right\">\n                              <IconButton size={'small'} edge=\"end\" onClick={() => removeItem(item.id)}>\n                                <DeleteIcon color={'error'} />\n                              </IconButton>\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })\n                    )}\n                    <TableRow sx={{ height: 30, backgroundColor: 'background.default' }} />\n                    <TableRow>\n                      <TableCell>Sub Total</TableCell>\n                      <TableCell />\n                      <TableCell align={'right'}>\n                        <EditableField value={currency(subTotal).format()} disabled />\n                      </TableCell>\n                      {people.map((person) => (\n                        <TableCell key={person.id}>\n                          <EditableField value={currency(personSubTotalMap[person.id]).format()} disabled />\n                        </TableCell>\n                      ))}\n                      <TableCell />\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>Tax</TableCell>\n                      <TableCell align={'right'}>\n                        <EditableField\n                          value={String(\n                            ((currency(receipt.taxCost).value / currency(subTotal > 0 ? subTotal : 1).value) * 100.0).toFixed(3),\n                          )}\n                          formatValue={(val) => `${val}%`}\n                          onChange={(percent) => updateChargeValueByPct(receiptId, 'taxCost', percent, subTotal)}\n                        />\n                      </TableCell>\n                      <TableCell align={'right'}>\n                        <EditableField\n                          value={currency(receipt.taxCost).format()}\n                          onChange={(value) => updateChargeValue(receiptId, 'taxCost', value)}\n                        />\n                      </TableCell>\n                      {people.map((person) => (\n                        <TableCell key={person.id}>\n                          <EditableField value={currency(getChargeForPerson('taxCost', person.id)).format()} disabled />\n                        </TableCell>\n                      ))}\n                      <TableCell />\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>Tip</TableCell>\n                      <TableCell align={'right'}>\n                        <EditableField\n                          value={String(\n                            ((currency(receipt.tipCost).value / currency(subTotal > 0 ? subTotal : 1).value) * 100.0).toFixed(3),\n                          )}\n                          formatValue={(val) => `${val}%`}\n                          onChange={(percent) => updateChargeValueByPct(receiptId, 'tipCost', percent, subTotal)}\n                        />\n                      </TableCell>\n                      <TableCell align={'right'}>\n                        <EditableField\n                          value={currency(receipt.tipCost).format()}\n                          onChange={(value) => updateChargeValue(receiptId, 'tipCost', value)}\n                        />\n                      </TableCell>\n                      {people.map((person) => (\n                        <TableCell key={person.id}>\n                          <EditableField value={currency(getChargeForPerson('tipCost', person.id)).format()} disabled />\n                        </TableCell>\n                      ))}\n                      <TableCell />\n                    </TableRow>\n                    <TableRow>\n                      <TableCell />\n                      <TableCell />\n                      <TableCell />\n                      {people.map((person) => (\n                        <TableCell key={person.id}>\n                          <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n                            <Tooltip title={person.name}>\n                              <Avatar style={{ height: 24, width: 24, fontSize: 12 }}>{nameToInitials(person.name)}</Avatar>\n                            </Tooltip>\n                          </Box>\n                        </TableCell>\n                      ))}\n                      <TableCell />\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>Total</TableCell>\n                      <TableCell />\n                      <TableCell align={'right'}>\n                        <EditableField value={currency(total).format()} disabled />\n                      </TableCell>\n                      {people.map((person) => (\n                        <TableCell\n                          key={person.id}\n                          onClick={() => {\n                            window.location.href = getVenmoPaymentLink({ amount: getTotalForPerson(person.id) });\n                          }}\n                        >\n                          <EditableField value={currency(getTotalForPerson(person.id)).format()} disabled />\n                        </TableCell>\n                      ))}\n                      <TableCell />\n                    </TableRow>\n                  </TableBody>\n                </StyledTable>\n              </TableContainer>\n            )}\n          </Grid>\n        </Grid>\n      )}\n    </>\n  );\n};\n\nexport default ReceiptItemsTab;\n\ntype AddItemFormProps = {\n  name: string;\n  cost: number;\n  quantity: number;\n};\n\nconst addItemFormDefaults: Partial<AddItemFormProps> = {\n  name: '',\n  cost: 0,\n  quantity: 1,\n};\n\nconst addItemFormValidation = yup.object().shape({\n  name: yup.string().required(),\n  cost: yup.number().positive().required(),\n  quantity: yup.number().integer().positive().required(),\n});\n\nconst AddItemForm: FunctionComponent<{ receipt: ReceiptEntity }> = ({ receipt }) => {\n  const { control, handleSubmit, reset } = useForm<AddItemFormProps>({\n    defaultValues: addItemFormDefaults,\n    resolver: yupResolver(addItemFormValidation),\n  });\n\n  const nameFieldRef = useRef<HTMLInputElement | null>(null);\n  const costFieldRef = useRef<HTMLInputElement | null>(null);\n  const quantityFieldRef = useRef<HTMLInputElement | null>(null);\n\n  const onSubmit = async (form: AddItemFormProps) => {\n    receiptsRef.child(receipt.id).child('items').push(form);\n    reset(addItemFormDefaults);\n    nameFieldRef.current?.focus();\n  };\n\n  const handleOnKeyDown = (name: FieldPath<AddItemFormProps>) => (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.code === 'Enter') {\n      if (name === 'name' && !!costFieldRef.current?.value) {\n        costFieldRef.current?.focus();\n      } else if (name === 'cost' || name === 'quantity') {\n        handleSubmit(onSubmit)(event);\n      }\n    }\n  };\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n    setTimeout(() => {\n      event.target.setSelectionRange(0, event.target.value.length);\n    }, 100);\n  };\n\n  return (\n    <Paper sx={{ p: 1 }}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Grid container spacing={2} alignItems={'flex-end'}>\n          <Grid item xs={12} md={6}>\n            <Controller\n              control={control}\n              name={'name'}\n              render={({ field }) => (\n                <TextField\n                  {...field}\n                  inputRef={(ref) => {\n                    nameFieldRef.current = ref;\n                    field.ref(ref);\n                  }}\n                  variant={'standard'}\n                  label=\"Item Name\"\n                  fullWidth\n                  onKeyDown={handleOnKeyDown('name')}\n                  onFocus={handleFocus}\n                />\n              )}\n            />\n          </Grid>\n          <Grid item xs={6} sm={8} md={2}>\n            <Controller\n              control={control}\n              name={'cost'}\n              render={({ field }) => (\n                <TextField\n                  {...field}\n                  inputRef={(ref) => {\n                    costFieldRef.current = ref;\n                    field.ref(ref);\n                  }}\n                  variant={'standard'}\n                  label=\"Cost\"\n                  fullWidth\n                  onKeyDown={handleOnKeyDown('cost')}\n                  onFocus={handleFocus}\n                  type={'number'}\n                  inputProps={{ step: 'any', min: 0 }}\n                />\n              )}\n              rules={{ required: true }}\n            />\n          </Grid>\n          <Grid item xs={6} sm={4} md={2}>\n            <Controller\n              control={control}\n              name={'quantity'}\n              render={({ field }) => (\n                <TextField\n                  {...field}\n                  inputRef={(ref) => {\n                    quantityFieldRef.current = ref;\n                    field.ref(ref);\n                  }}\n                  variant={'standard'}\n                  label=\"Quantity\"\n                  fullWidth\n                  onKeyDown={handleOnKeyDown('quantity')}\n                  onFocus={handleFocus}\n                  type={'number'}\n                  inputProps={{ min: 0 }}\n                />\n              )}\n              rules={{ required: true }}\n            />\n          </Grid>\n          <Grid item xs={12} md={2} sx={{ overflow: 'hidden' }}>\n            <Button variant={'contained'} color={'primary'} fullWidth type={'submit'}>\n              Add\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </Paper>\n  );\n};\n","import React, { FunctionComponent, useRef } from 'react';\nimport { receiptsRef, useGetReceipt } from '../functions/firebase';\nimport { useParams } from 'react-router';\nimport { ReceiptInfoPathProps } from '../core/BaseRouter';\nimport { Avatar, Box, Button, Divider, IconButton, List, ListItem, ListItemAvatar, Paper, TextField, Typography } from '@material-ui/core';\nimport { Controller, useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { nameToInitials } from '../functions/utils';\nimport EditableField from '../components/EditableField';\n\ntype AddPersonFormProps = { name: string };\n\nconst ReceiptPeopleTab: FunctionComponent = () => {\n  const { receiptId } = useParams<ReceiptInfoPathProps>();\n\n  const { receipt, people } = useGetReceipt(receiptId);\n\n  const { control, handleSubmit, reset } = useForm<AddPersonFormProps>({\n    resolver: yupResolver(\n      yup.object().shape({\n        name: yup.string().required(),\n      }),\n    ),\n  });\n\n  const nameFieldRef = useRef<HTMLInputElement | null>(null);\n\n  const onSubmit = (form: AddPersonFormProps) => {\n    if (!receipt) return;\n    receiptsRef.child(receipt.id).child('people').push(form);\n    reset({ name: '' });\n  };\n\n  const handleOnKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.code === 'Enter') {\n      handleSubmit(onSubmit)(event);\n    }\n  };\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n    setTimeout(() => {\n      event.target.setSelectionRange(0, event.target.value.length);\n    }, 100);\n  };\n\n  const removePerson = async (personId: string) => {\n    if (!confirm(\"Are you sure you'd like to remove this person?\")) return;\n    if (!receipt || !personId) return;\n    await receiptsRef.child(receipt.id).child('people').child(personId).remove();\n  };\n\n  return (\n    <>\n      <Typography variant={'h3'} sx={{ mb: 2 }}>\n        People\n      </Typography>\n      <Paper>\n        <List>\n          {people.map((person) => (\n            <ListItem key={person.id}>\n              <Box sx={{ display: 'flex', alignItems: 'center', width: '100%', gap: 2 }}>\n                <ListItemAvatar>\n                  <Avatar>{nameToInitials(person.name)}</Avatar>\n                </ListItemAvatar>\n                <EditableField value={person.name} width={'100%'} textAlign={'left'} />\n                <IconButton size={'small'} edge=\"end\" onClick={() => removePerson(person.id)}>\n                  <DeleteIcon color={'error'} />\n                </IconButton>\n              </Box>\n            </ListItem>\n          ))}\n          {people?.length > 0 && <Divider sx={{ mt: 2, mb: 2 }} />}\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <ListItem>\n              <Box sx={{ width: '100%', display: 'flex', gap: '16px' }}>\n                <Controller\n                  control={control}\n                  name={'name'}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      inputRef={(ref) => {\n                        nameFieldRef.current = ref;\n                        field.ref(ref);\n                      }}\n                      variant={'standard'}\n                      label=\"Person Name\"\n                      fullWidth\n                      onKeyDown={handleOnKeyDown}\n                      onFocus={handleFocus}\n                      sx={{ flex: 1 }}\n                    />\n                  )}\n                />\n                <Button type={'submit'}>Add</Button>\n              </Box>\n            </ListItem>\n          </form>\n        </List>\n      </Paper>\n    </>\n  );\n};\n\nexport default ReceiptPeopleTab;\n","import React, { FunctionComponent, useEffect } from 'react';\nimport { Redirect, Route, Switch, useHistory } from 'react-router-dom';\nimport { ReceiptInfoPathProps, ReceiptInfoTabs, Routes } from '../core/BaseRouter';\nimport ReceiptItemsTab from './ReceiptItemsTab';\nimport ReceiptPeopleTab from './ReceiptPeopleTab';\nimport { Box, CircularProgress, Container, Grid, Tab, Tabs, Typography } from '@material-ui/core';\nimport { useParams } from 'react-router';\nimport { updateReceiptValue, useGetReceipt } from '../functions/firebase';\nimport EditableField from '../components/EditableField';\n\nconst ReceiptInfoPage: FunctionComponent = () => {\n  const { receiptId, tab } = useParams<ReceiptInfoPathProps>();\n  const history = useHistory();\n\n  const { receipt, people, isLoading } = useGetReceipt(receiptId);\n\n  useEffect(() => {\n    if (!isLoading && people?.length === 0) {\n      history.push(Routes.receiptInfo.route({ receiptId, tab: 'people' }));\n    }\n  }, [people, isLoading]);\n\n  if (isLoading)\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\n        <CircularProgress />\n      </Box>\n    );\n\n  return (\n    <>\n      <Container maxWidth={'md'} sx={{ paddingTop: 2 }}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Tabs\n              value={ReceiptInfoTabs.indexOf(tab ?? 'items')}\n              onChange={(event, value) => history.push(Routes.receiptInfo.route({ receiptId, tab: ReceiptInfoTabs[value] }))}\n              indicatorColor=\"primary\"\n              textColor=\"primary\"\n              centered\n              style={{ marginBottom: 20 }}\n            >\n              {ReceiptInfoTabs.map((tab) => (\n                <Tab key={tab} label={tab} />\n              ))}\n            </Tabs>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography>\n              <EditableField\n                value={receipt?.title ?? ''}\n                onChange={(value) => updateReceiptValue(receiptId, 'title', value)}\n                width={'100%'}\n                textAlign={'left'}\n              />\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Switch>\n              <Route path={Routes.receiptInfo.tabPath({ tab: 'items' })} exact component={ReceiptItemsTab} />\n              <Route path={Routes.receiptInfo.tabPath({ tab: 'people' })} exact component={ReceiptPeopleTab} />\n              <Redirect to={Routes.receiptInfo.tabPath({ tab: 'items' })} from={Routes.receiptInfo.path} />\n            </Switch>\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default ReceiptInfoPage;\n","import React, { FunctionComponent } from 'react';\nimport { generatePath, Redirect, Route, Switch } from 'react-router-dom';\nimport { ReceiptsPage } from '../pages/ReceiptsPage';\nimport OldApp from '../pages/old/OldApp';\nimport ReceiptInfoPage from '../pages/ReceiptInfoPage';\n\nconst RECEIPTS_PATH = `/receipts`;\nconst receipts = {\n  path: RECEIPTS_PATH,\n  route: (): string => RECEIPTS_PATH,\n};\n\nexport type ReceiptInfoPathProps = {\n  receiptId: string;\n  tab?: ReceiptInfoTab;\n};\nexport const ReceiptInfoTabs = ['items', 'people'] as const;\nexport type ReceiptInfoTab = typeof ReceiptInfoTabs[number];\nconst RECEIPT_INFO_PATH = `/receipts/:receiptId/:tab?`;\nconst receiptInfo = {\n  path: RECEIPT_INFO_PATH,\n  route: (params: ReceiptInfoPathProps): string => generatePath(RECEIPT_INFO_PATH, params),\n  tabPath: ({ tab }: Required<Pick<ReceiptInfoPathProps, 'tab'>>): string => RECEIPT_INFO_PATH.replace(':tab?', tab),\n};\n\nexport const Routes = {\n  receipts,\n  receiptInfo,\n};\n\nexport const BaseRouter: FunctionComponent = () => {\n  return (\n    <Switch>\n      <Redirect to={Routes.receipts.path} from={'/'} exact />\n      <Route path={Routes.receipts.path} exact component={ReceiptsPage} />\n      <Route path={Routes.receiptInfo.path} exact component={ReceiptInfoPage} />\n      <Route path={'/old'} component={OldApp} />\n    </Switch>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { AppBar, Box, styled, Toolbar, Typography } from '@material-ui/core';\nimport UnstyledLink from '../components/UnstyledLink';\n\nconst Offset = styled('div')(({ theme }) => theme.mixins.toolbar);\n\nconst Layout: FunctionComponent = ({ children }) => {\n  return (\n    <>\n      <Box style={{ paddingBottom: 500 }}>\n        <AppBar position=\"fixed\">\n          <Toolbar>\n            <UnstyledLink to={'/'}>\n              <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\n                Rece\n              </Typography>\n            </UnstyledLink>\n          </Toolbar>\n        </AppBar>\n        <Offset />\n        {children}\n      </Box>\n    </>\n  );\n};\n\nexport default Layout;\n","import { FunctionComponent } from 'react';\nimport { BaseRouter } from './BaseRouter';\nimport Layout from './Layout';\nimport { createTheme, CssBaseline, ThemeProvider } from '@material-ui/core';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { grey } from '@material-ui/core/colors';\n\nconst theme = createTheme({\n  palette: {\n    background: {\n      default: grey[100],\n    },\n  },\n});\n\nconst App: FunctionComponent = () => {\n  return (\n    <Router>\n      <ThemeProvider theme={theme}>\n        <Layout>\n          <CssBaseline />\n          <BaseRouter />\n        </Layout>\n      </ThemeProvider>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './core/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
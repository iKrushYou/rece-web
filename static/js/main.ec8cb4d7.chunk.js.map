{"version":3,"sources":["Layout.tsx","functions/utils.ts","hooks/useLocalStorage.tsx","hooks/useAppData.ts","ItemsTab.tsx","PeopleTab.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","offset","mixins","toolbar","Layout","children","classes","Box","style","paddingBottom","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","className","nameToInitials","name","toUpperCase","split","map","part","substr","join","setify","array","Set","calcPercent","numerator","denominator","toFixed","isNaN","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useAppData","items","people","personToItemsMap","itemToPeopleMap","tip","tax","appData","setAppData","itemCostMap","useMemo","reduce","curr","id","cost","subTotal","previousValue","currentValue","currency","add","dollars","total","subTotalForPerson","personId","sum","itemId","divide","length","percentForPerson","taxForPerson","multiply","tipForPerson","addItem","newItem","prev","removeItem","filter","splitItem","find","splitCount","parseInt","prompt","format","newItems","Array","fill","_","index","uuidv4","updateItem","addPerson","newPerson","removePerson","person","handleSetItemPerson","selected","_itemId","_personId","totalForPerson","itemEntryFormDefaults","undefined","ItemsTab","useForm","defaultValues","control","handleSubmit","reset","nameFieldRef","useRef","costFieldRef","handleOnSubmit","current","focus","handleOnKeyDown","event","code","useTheme","Grid","container","spacing","xs","onSubmit","alignItems","md","render","field","TextField","inputRef","ref","label","fullWidth","onKeyDown","type","rules","required","min","Button","overflow","Table","TableHead","TableRow","top","backgroundColor","zIndex","TableCell","left","minWidth","width","Avatar","height","fontSize","TableBody","whiteSpace","palette","warning","light","paddingTop","onChange","formatValue","display","onClick","confirm","Checkbox","checked","includes","target","marginRight","tipPct","TableFooter","location","href","txn","user","amount","note","getVenmoPaymentLink","EditableNumberField","isEditMode","setIsEditMode","textFieldRef","useLayoutEffect","placeholder","parseFloat","onBlur","marginLeft","PeopleTab","personNameInput","setPersonNameInput","handleAddPerson","trim","List","ListItem","ListItemAvatar","ListItemText","primary","ListItemSecondaryAction","App","currentTab","setCurrentTab","Container","Tabs","indicatorColor","textColor","centered","marginBottom","Tab","ReactDOM","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.ec8cb4d7.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { AppBar, Box, Button, IconButton, makeStyles, Toolbar, Typography } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme) => ({\n  offset: theme.mixins.toolbar,\n}));\n\nconst Layout: FunctionComponent = ({ children }) => {\n  const classes = useStyles();\n\n  return (\n    <Box style={{ paddingBottom: 500 }}>\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\">Rece</Typography>\n        </Toolbar>\n      </AppBar>\n      <Box className={classes.offset} />\n      {children}\n    </Box>\n  );\n};\n\nexport default Layout;\n","export const nameToInitials = (name: string) => {\n  return name\n    .toUpperCase()\n    .split(' ')\n    .map((part) => part.substr(0, 1))\n    .join('');\n};\n\nexport const indexArray = (length: number) => new Array(length).fill(0).map((_, index) => index);\n\nexport const setify = <T>(array: T[]): T[] => [...new Set(array)];\n\nexport const calcPercent = (numerator: number, denominator: number, toFixed = 2) => {\n  if (isNaN(numerator) || isNaN(denominator) || denominator === 0) return 0;\n  return ((numerator / denominator) * 100.0).toFixed(toFixed);\n};\n","import { Dispatch, SetStateAction, useState } from 'react';\n\nfunction useLocalStorage<T>(key: string, initialValue: T): [T, Dispatch<SetStateAction<T>>] {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n","import useLocalStorage from './useLocalStorage';\nimport ReceiptItem from '../types/ReceiptItem';\nimport Person from '../types/Person';\nimport { indexArray, setify } from '../functions/utils';\nimport { useMemo } from 'react';\nimport currency from 'currency.js';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface AppDataEntity {\n  items: ReceiptItem[];\n  people: Person[];\n  personToItemsMap: Record<string, string[]>;\n  itemToPeopleMap: Record<string, string[]>;\n  tip: number;\n  tax: number;\n}\n\nexport default function useAppData() {\n  const [appData, setAppData] = useLocalStorage<AppDataEntity>('appData', {\n    items: [],\n    people: [],\n    personToItemsMap: {},\n    itemToPeopleMap: {},\n    tip: 0,\n    tax: 0,\n  });\n\n  const addItem = (newItem: ReceiptItem) => {\n    setAppData((prev) => ({ ...prev, items: [...prev.items, newItem] }));\n  };\n\n  const removeItem = (itemId: string) => {\n    setAppData((prev) => ({ ...prev, items: prev.items.filter((item) => item.id !== itemId) }));\n  };\n\n  const splitItem = (itemId: string) => {\n    const item = appData.items.find((item) => item.id === itemId);\n    if (!item) return;\n    const splitCount = parseInt(\n      prompt(`How many items should (${item.name} - ${currency(item.cost).format()}) be split into?`) || '',\n    );\n    if (!splitCount || isNaN(splitCount)) return;\n    const newItems: ReceiptItem[] = indexArray(splitCount).map(() => ({\n      id: uuidv4(),\n      name: item.name,\n      cost: item.cost / splitCount,\n    }));\n    setAppData((prev) => ({ ...prev, items: [...prev.items.filter((item) => item.id !== itemId), ...newItems] }));\n  };\n\n  const updateItem = (newItem: ReceiptItem) => {\n    setAppData((prev) => ({ ...prev, items: prev.items.map((item) => (item.id === newItem.id ? newItem : item)) }));\n  };\n\n  const addPerson = (newPerson: Person) => {\n    setAppData((prev) => ({ ...prev, people: [...prev.people, newPerson] }));\n  };\n\n  const removePerson = (personId: string) => {\n    setAppData((prev) => ({ ...prev, people: prev.people.filter((person) => person.id !== personId) }));\n  };\n\n  const handleSetItemPerson = (itemId: string, personId: string, selected: boolean) => {\n    setAppData((prev) => {\n      const { personToItemsMap, itemToPeopleMap } = prev;\n      if (!personToItemsMap[personId]) personToItemsMap[personId] = [];\n      if (selected) {\n        personToItemsMap[personId] = setify([...personToItemsMap[personId], itemId]);\n      } else {\n        personToItemsMap[personId] = personToItemsMap[personId].filter((_itemId) => _itemId !== itemId);\n      }\n      if (!itemToPeopleMap[itemId]) itemToPeopleMap[itemId] = [];\n      if (selected) {\n        itemToPeopleMap[itemId] = setify([...itemToPeopleMap[itemId], personId]);\n      } else {\n        itemToPeopleMap[itemId] = itemToPeopleMap[itemId].filter((_personId) => _personId !== personId);\n      }\n      return { ...prev, personToItemsMap, itemToPeopleMap };\n    });\n  };\n\n  const itemCostMap = useMemo<Record<string, number>>(() => {\n    return appData.items.reduce((map, curr) => ({ ...map, [curr.id]: curr.cost }), {});\n  }, [appData.items]);\n\n  const subTotal = useMemo(\n    () =>\n      appData.items.reduce(\n        (previousValue, currentValue) => currency(previousValue).add(currentValue.cost).dollars(),\n        0,\n      ),\n    [appData.items],\n  );\n\n  const total = currency(subTotal).add(appData.tax).add(appData.tip).dollars();\n\n  const subTotalForPerson = (personId: string) =>\n    appData.personToItemsMap[personId]?.reduce(\n      (sum, itemId) =>\n        currency(sum).add(currency(itemCostMap[itemId]).divide(appData.itemToPeopleMap[itemId].length)).dollars(),\n      0,\n    ) || 0;\n\n  const percentForPerson = (personId: string) => subTotalForPerson(personId) / subTotal;\n\n  const taxForPerson = (personId: string) => currency(appData.tax).multiply(percentForPerson(personId)).dollars();\n  const tipForPerson = (personId: string) => currency(appData.tip).multiply(percentForPerson(personId)).dollars();\n\n  const totalForPerson = (personId: string) =>\n    currency(subTotalForPerson(personId)).add(taxForPerson(personId)).add(tipForPerson(personId)).dollars();\n\n  return {\n    ...appData,\n    setAppData,\n    addItem,\n    removeItem,\n    splitItem,\n    updateItem,\n    addPerson,\n    removePerson,\n    handleSetItemPerson,\n    itemCostMap,\n    subTotal,\n    total,\n    subTotalForPerson,\n    taxForPerson,\n    tipForPerson,\n    totalForPerson,\n  };\n}\n","import React, { FunctionComponent, KeyboardEvent, useLayoutEffect, useRef, useState } from 'react';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Checkbox,\n  Grid,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TextField,\n  Typography,\n  useTheme,\n} from '@material-ui/core';\nimport { Controller, FieldPath, useForm } from 'react-hook-form';\nimport { v4 as uuidv4 } from 'uuid';\nimport currency from 'currency.js';\nimport { calcPercent, nameToInitials } from './functions/utils';\nimport useAppData from './hooks/useAppData';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CallSplitIcon from '@material-ui/icons/CallSplit';\n\ninterface ItemEntryForm {\n  name: string;\n  cost: number;\n}\n\nconst itemEntryFormDefaults: Partial<ItemEntryForm> = {\n  name: '',\n  cost: undefined,\n};\n\nconst getVenmoPaymentLink = ({\n  txn = 'charge',\n  user = '',\n  amount,\n  note = 'Split by Rece',\n}: {\n  txn?: 'pay' | 'charge';\n  user?: string;\n  amount: number;\n  note?: string;\n}) => `venmo://paycharge?txn=${txn}&recipients=${user}&amount=${amount}&note=${note}`;\n\nconst ItemsTab: FunctionComponent = () => {\n  const {\n    setAppData,\n    items,\n    people,\n    personToItemsMap,\n    itemToPeopleMap,\n    addItem,\n    removeItem,\n    splitItem,\n    updateItem,\n    handleSetItemPerson,\n    subTotal,\n    subTotalForPerson,\n    tax,\n    tip,\n    total,\n    taxForPerson,\n    tipForPerson,\n    totalForPerson,\n  } = useAppData();\n\n  const { control, handleSubmit, reset } = useForm<ItemEntryForm>({ defaultValues: itemEntryFormDefaults });\n\n  const nameFieldRef = useRef<HTMLInputElement | null>(null);\n  const costFieldRef = useRef<HTMLInputElement | null>(null);\n\n  const handleOnSubmit = ({ name, cost }: ItemEntryForm) => {\n    const newItem = {\n      id: uuidv4(),\n      name,\n      cost,\n    };\n    addItem(newItem);\n    reset(itemEntryFormDefaults);\n    nameFieldRef.current?.focus();\n  };\n\n  const handleOnKeyDown = (name: FieldPath<ItemEntryForm>) => (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.code === 'Enter') {\n      if (name === 'name') {\n        costFieldRef.current?.focus();\n      } else if (name === 'cost') {\n        handleSubmit(handleOnSubmit)(event);\n      }\n    }\n  };\n\n  const theme = useTheme();\n\n  return (\n    <>\n      <Typography>Enter Receipt Items</Typography>\n      <Grid container spacing={4}>\n        <Grid item xs={12}>\n          <form onSubmit={handleSubmit(handleOnSubmit)}>\n            <Grid container spacing={2} alignItems={'flex-end'}>\n              <Grid item xs={12} md={6}>\n                <Controller\n                  control={control}\n                  name={'name'}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      inputRef={(ref) => {\n                        nameFieldRef.current = ref;\n                        field.ref(ref);\n                      }}\n                      label=\"Item Name\"\n                      fullWidth\n                      onKeyDown={handleOnKeyDown('name')}\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={12} md={5}>\n                <Controller\n                  control={control}\n                  name={'cost'}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      inputRef={(ref) => {\n                        costFieldRef.current = ref;\n                        field.ref(ref);\n                      }}\n                      label=\"Cost\"\n                      fullWidth\n                      onKeyDown={handleOnKeyDown('cost')}\n                      type={'number'}\n                    />\n                  )}\n                  rules={{ required: true, min: 0 }}\n                />\n              </Grid>\n              <Grid item xs={12} md={1}>\n                <Button variant={'contained'} color={'primary'} fullWidth>\n                  Add\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n        </Grid>\n        <Grid item xs={12}>\n          <Box style={{ overflow: 'auto', position: 'relative' }}>\n            <Table>\n              <TableHead>\n                <TableRow style={{ position: 'sticky', top: 0, backgroundColor: 'white', zIndex: 101 }}>\n                  <TableCell\n                    style={{ position: 'sticky', left: 0, backgroundColor: 'white', zIndex: 100, minWidth: 100 }}\n                  >\n                    Name\n                  </TableCell>\n                  <TableCell style={{ minWidth: 200 }}>Cost</TableCell>\n                  <TableCell />\n                  {people.map((person) => (\n                    <TableCell key={person.id} style={{ width: 1 }}>\n                      <Avatar style={{ height: 24, width: 24, fontSize: 12 }}>{nameToInitials(person.name)}</Avatar>\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {items.map((item) => (\n                  <TableRow key={item.id}>\n                    <TableCell\n                      style={{\n                        position: 'sticky',\n                        left: 0,\n                        // backgroundColor: 'white',\n                        zIndex: 100,\n                        whiteSpace: 'nowrap',\n                        backgroundColor:\n                          (itemToPeopleMap[item.id]?.length || 0) === 0 ? theme.palette.warning.light : 'white',\n                      }}\n                    >\n                      {item.name}\n                    </TableCell>\n                    <TableCell style={{ paddingTop: 0, paddingBottom: 0 }}>\n                      <EditableNumberField\n                        value={item.cost}\n                        onChange={(value) => updateItem({ ...item, cost: value })}\n                        formatValue={(value) => currency(value).format()}\n                      />\n                    </TableCell>\n                    <TableCell style={{ paddingTop: 0, paddingBottom: 0 }}>\n                      <Box style={{ display: 'flex' }}>\n                        <IconButton edge=\"end\" onClick={() => splitItem(item.id)}>\n                          <CallSplitIcon color={'primary'} />\n                        </IconButton>\n                        <IconButton\n                          edge=\"end\"\n                          onClick={() => {\n                            if (confirm(\"Are you sure you'd like to remove this item?\")) removeItem(item.id);\n                          }}\n                        >\n                          <DeleteIcon color={'error'} />\n                        </IconButton>\n                      </Box>\n                    </TableCell>\n                    {people.map((person) => (\n                      <TableCell key={person.id} style={{ paddingTop: 0, paddingBottom: 0 }}>\n                        <Checkbox\n                          checked={personToItemsMap[person.id]?.includes(item.id) || false}\n                          onChange={(event) => handleSetItemPerson(item.id, person.id, event.target.checked)}\n                        />\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))}\n                {/* SubTotal Row */}\n                <TableRow>\n                  <TableCell\n                    style={{\n                      position: 'sticky',\n                      left: 0,\n                      backgroundColor: 'white',\n                      zIndex: 100,\n                      whiteSpace: 'nowrap',\n                    }}\n                  >\n                    Subtotal\n                  </TableCell>\n                  <TableCell style={{ paddingTop: 0, paddingBottom: 0 }}>\n                    <Button>{currency(subTotal).format()}</Button>\n                  </TableCell>\n                  <TableCell />\n                  {people.map((person) => (\n                    <TableCell key={person.id}>{currency(subTotalForPerson(person.id)).format()}</TableCell>\n                  ))}\n                </TableRow>\n                {/* Tax Row */}\n                <TableRow>\n                  <TableCell\n                    style={{\n                      position: 'sticky',\n                      left: 0,\n                      backgroundColor: 'white',\n                      zIndex: 100,\n                      whiteSpace: 'nowrap',\n                    }}\n                  >\n                    Tax ({calcPercent(tax, subTotal)}%)\n                  </TableCell>\n                  <TableCell style={{ paddingTop: 0, paddingBottom: 0 }}>\n                    <EditableNumberField\n                      value={tax}\n                      onChange={(tax) => setAppData((prev) => ({ ...prev, tax }))}\n                      formatValue={(value) => currency(value).format()}\n                    />\n                  </TableCell>\n                  <TableCell />\n                  {people.map((person) => (\n                    <TableCell key={person.id}>{currency(taxForPerson(person.id)).format()}</TableCell>\n                  ))}\n                </TableRow>\n                {/* Tip Row */}\n                <TableRow>\n                  <TableCell\n                    style={{\n                      position: 'sticky',\n                      left: 0,\n                      backgroundColor: 'white',\n                      zIndex: 100,\n                      whiteSpace: 'nowrap',\n                      paddingTop: 0,\n                      paddingBottom: 0,\n                    }}\n                  >\n                    <Box\n                      style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                      }}\n                    >\n                      <Typography style={{ marginRight: 10 }}>Tip</Typography>\n                      <EditableNumberField\n                        value={tip / subTotal}\n                        onChange={(tipPct) => setAppData((prev) => ({ ...prev, tip: subTotal * (tipPct / 100.0) }))}\n                        formatValue={(value) => `${(value * 100).toFixed(2)}%`}\n                      />\n                    </Box>\n                  </TableCell>\n                  <TableCell style={{ paddingTop: 0, paddingBottom: 0 }}>\n                    <EditableNumberField\n                      value={tip}\n                      onChange={(tip) => setAppData((prev) => ({ ...prev, tip }))}\n                      formatValue={(value) => currency(value).format()}\n                    />\n                  </TableCell>\n                  <TableCell />\n                  {people.map((person) => (\n                    <TableCell key={person.id}>{currency(tipForPerson(person.id)).format()}</TableCell>\n                  ))}\n                </TableRow>\n              </TableBody>\n              <TableFooter>\n                {/* Total Row */}\n                <TableRow>\n                  <TableCell\n                    style={{\n                      position: 'sticky',\n                      left: 0,\n                      backgroundColor: 'white',\n                      zIndex: 100,\n                      whiteSpace: 'nowrap',\n                      paddingTop: 0,\n                      paddingBottom: 0,\n                    }}\n                  >\n                    Total\n                  </TableCell>\n                  <TableCell style={{ paddingTop: 0, paddingBottom: 0 }}>{currency(total).format()}</TableCell>\n                  <TableCell />\n                  {people.map((person) => (\n                    <TableCell key={person.id}>\n                      <Button\n                        onClick={() => {\n                          window.location.href = getVenmoPaymentLink({ amount: totalForPerson(person.id) });\n                        }}\n                      >\n                        {currency(totalForPerson(person.id)).format()}\n                      </Button>\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableFooter>\n            </Table>\n          </Box>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default ItemsTab;\n\nconst EditableNumberField: FunctionComponent<{\n  value: number;\n  onChange: (value: number) => void;\n  formatValue?: (value: number) => string;\n}> = ({ value, onChange, formatValue = (value) => `${value}` }) => {\n  const [isEditMode, setIsEditMode] = useState(false);\n  const textFieldRef = useRef<HTMLInputElement>();\n\n  useLayoutEffect(() => {\n    if (isEditMode) textFieldRef.current?.focus();\n  }, [isEditMode]);\n\n  return isEditMode ? (\n    <TextField\n      placeholder={formatValue(value)}\n      onChange={(event) => onChange(parseFloat(event.target.value))}\n      type={'number'}\n      onBlur={() => setIsEditMode(false)}\n      onKeyDown={(event) => {\n        if (['Enter', 'Escape'].includes(event.code)) setIsEditMode(false);\n      }}\n      inputRef={textFieldRef}\n      style={{ width: 80, marginLeft: 10 }}\n    />\n  ) : (\n    <Button onClick={() => setIsEditMode(true)}>{formatValue(value)}</Button>\n  );\n};\n","import React, { FunctionComponent, KeyboardEvent, useState } from 'react';\nimport {\n  Avatar,\n  Button,\n  Grid,\n  IconButton,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemSecondaryAction,\n  ListItemText,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { nameToInitials } from './functions/utils';\nimport useAppData from './hooks/useAppData';\n\nconst PeopleTab: FunctionComponent = () => {\n  const { people, addPerson, removePerson } = useAppData();\n\n  const [personNameInput, setPersonNameInput] = useState('');\n\n  const handleAddPerson = (name: string) => {\n    if (!name) return;\n    addPerson({ id: uuidv4(), name: name.trim() });\n    setPersonNameInput('');\n  };\n\n  const handleOnKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.code === 'Enter') {\n      handleAddPerson(personNameInput);\n    }\n  };\n\n  return (\n    <>\n      <Typography>Enter People</Typography>\n      <Grid container spacing={4}>\n        <Grid item xs={12}>\n          <Grid container spacing={2} alignItems={'flex-end'}>\n            <Grid item xs={12} md={11}>\n              <TextField\n                value={personNameInput}\n                onChange={(event) => setPersonNameInput(event.target.value)}\n                label=\"Person Name\"\n                fullWidth\n                onKeyDown={handleOnKeyDown}\n              />\n            </Grid>\n            <Grid item xs={12} md={1}>\n              <Button\n                variant={'contained'}\n                color={'primary'}\n                onClick={() => handleAddPerson(personNameInput)}\n                fullWidth\n              >\n                Add\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <List>\n            {people.map((person) => (\n              <ListItem key={person.id}>\n                <ListItemAvatar>\n                  <Avatar>{nameToInitials(person.name)}</Avatar>\n                </ListItemAvatar>\n                <ListItemText primary={person.name} />\n                <ListItemSecondaryAction>\n                  {/*<IconButton edge=\"end\">*/}\n                  {/*  <EditIcon />*/}\n                  {/*</IconButton>*/}\n                  <IconButton edge=\"end\" onClick={() => removePerson(person.id)}>\n                    <DeleteIcon />\n                  </IconButton>\n                </ListItemSecondaryAction>\n              </ListItem>\n            ))}\n          </List>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default PeopleTab;\n","import React, { useState } from 'react';\nimport { Container, Tab, Tabs } from '@material-ui/core';\nimport Layout from './Layout';\nimport ItemsTab from './ItemsTab';\nimport PeopleTab from './PeopleTab';\n\ninterface ReceiptItem {\n  id: string;\n  name: string;\n  cost: number;\n}\n\ninterface ItemEntryForm {\n  name: string;\n  cost: number;\n}\n\nconst itemEntryFormDefaults: Partial<ItemEntryForm> = {\n  name: '',\n  cost: undefined,\n};\n\nfunction App() {\n  const [currentTab, setCurrentTab] = useState(0);\n\n  return (\n    <div>\n      <Layout>\n        <Container>\n          <Tabs\n            value={currentTab}\n            onChange={(event, value) => setCurrentTab(value)}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            centered\n            style={{ marginBottom: 20 }}\n          >\n            <Tab label=\"Items\" />\n            <Tab label=\"People\" />\n          </Tabs>\n          {currentTab === 0 && <ItemsTab />}\n          {currentTab === 1 && <PeopleTab />}\n        </Container>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { CssBaseline } from '@material-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}